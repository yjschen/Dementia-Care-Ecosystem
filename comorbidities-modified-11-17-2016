   /****************************************************************

    UPDATED on July 22, 2010 to remove code (below) that made a selection

    on HCPCS.  Now all the claims are looked at for conditions.

    

    if (&FILETYPE='M') or

      ('00100' <= &HCPCS <= '01999' or '10021' <= &HCPCS <= '69979' or

       '77261' <= &HCPCS <= '79999' or

       '90918' <= &HCPCS <= '91299' or '92950' <= &HCPCS <= '99199');

    

    *****************************************************************

 

    This SAS macro first removes records that are considered to have

    unreliable diagnosis coding.  These are selected by HCPCS.  

    Generally, they are bills that were not encoded by clinicians.

    Since CMS requires the bill to have a diagnosis code in order to

    be paid, someone (frequently the receptionist, etc) fills in an

    existing code for the patient that may not accurately reflect the

    reason for the procedure.



    Then, the macro reviews all claims and blanks out diagnoses that 

    are not considered valid.  The macro searches the claims as follows:

       KEEPS: all diagnosis codes on MEDPAR claims.

       KEEPS: all diagnosis codes on the Outpatient or Physician/Supplier

        claims that are also found on MEDPAR claims.

       KEEPS: all diagnosis codes on the Outpatient or Physician/supplier 

        claims that appear more than once over a time span exceeding 30 

        days. (Billing cycles may cause multiple bills to be submitted 

        for the same procedure within that time frame.)

    PLEASE NOTE: The NCI application of this algorithm includes specific

    ICD-9 codes.  Other researchers may wish to search within a group of

    related codes.  In those cases, this macro would have to be modified 

    or new code would have to be written.



    All other variables remain the same.  The dataset must contain 

    lists of diagnosis codes.  There are other specific variables 

    needed to complete this task.



    In order to use this program:

      1. Include this file in your SAS program  

          %include '/directory path/remove.ruleout.dxcodes.macro.sas';

      2. Create a clean file of claim records to send to the macro.

          You may include claim information from any file, including

          MEDPAR, Outpatient SAF and Physicial/Supplier (NCH).



      3. After setting up your data file, call the macro RULEOUT:

          RULEOUT(SetIn, PatId, Clmdte, Start, Finish, dx01-dx10, 10, HCPCS, Filetype);

          would send the data set 'SetIn', to the macro.  This file 

          includes the person identifier 'PatId', the date of claim 

          from the claim record 'Clmdte', the date the COMORBidity

          window opens 'Start', and the date it closes 'Finish'.

          There are 10 diagnosis codes in the array variables 'dx01-dx10'.

          Diagnosis codes are in ICD-9 format.  HCPCS are the procedure

          codes from the SAF and NCH files. Only CPT-4 codes are used in

          this program.  The file source of each claim record is found

          in the variable 'Filetype' (M=Medpar, O=Outpatient, N=NCH).

    

    This returns the data set CLMRECS which contains claim records within

    the specified window.  Only acceptable ICD-9 diagnosis codes are included.

    The variables are the same as those in the file sent to the macro.

    The data set is sorted by the person identifier.

   **********************************************************************/





   /* Main macro RULEOUT */

%MACRO RULEOUT(SETIN,PATID,CLMDTE,START,FINISH,DXVARSTR,NDXVAR,HCPCS,FILETYPE);

   /**********************************************************************

    SETIN:    Dataset name: a dataset that contains the following:

    PATID:    Variable name: Unique ID for each patient.  &SETIN must be

              sorted by &PATID.  There may be more than 1 record per patient.

    CLMDTE:   Variable name: Date of the claim found on the claim file.

              Should be a SAS date format.

    START:    Variable name: Date the COMORBidity window opens, ie DX-12

              Should be a SAS date format.

    FINISH:   Variable name: Date the COMORBidity window closes, ie DX-1

              Should be a SAS date format.

    DXVARSTR: Variable names: the diagnosis codes, ie 'DX01-DX10'

    NDXVAR:   Number: the actual number of diagnosis codes in DXVARSTR

    HCPCS:    Variable name: the SAF and NCH file procedure codes in CPT-4.

    FILETYPE: Variable name: the source of the claim record.  Only important

              value is 'M' for MEDPAR (inpatient hospital records).  If this

              is 'M', all ICD-9 diagnosis codes are accepted.

   **********************************************************************/



  /* select claim records in appropriate window.  Keep 30 days extra on both sides */

  /* to allow for complete checks for the Outpatient and Physician/Supplier files.   */

  Data CCW_INTE.CLMRECS;

    set &SETIN;

    IF &START-30 <= &CLMDTE <= &FINISH+30;



  proc sort data=CCW_INTE.CLMRECS;

    by &PATID &CLMDTE;



  /* Separate data into variable of interest and variables unaffected by this macro */

  data test(keep=&PATID &CLMDTE icd9dx cnt j &filetype) CCW_INTE.CLMRECS(drop=j cnt &CLMDTE icd9dx &DXVARSTR);

    set CCW_INTE.CLMRECS;

    by &PATID &CLMDTE;

    ARRAY DXCODE (&NDXVAR) $ &DXVARSTR;

    retain cnt 0;

    cnt=cnt+1;

    cnta=cnt;

    clm_dtea=&CLMDTE;

    output CCW_INTE.CLMRECS;

    do j=1 to &NDXVAR;

      icd9dx=dxcode(j);

      if not (icd9dx='     ') then output test;

      end;



  proc sort data=test;

    by &PATID icd9dx &FILETYPE &CLMDTE;



  /* Initial pass at Dx codes: in test, retain all code in MEDPAR and those that appear */

  /* multiple times in a time span exceeding 30 days.  In hold, retain all codes that   */

  /* appear multiple time, but exact time span unclear when record processed.  In icds, */

  /* retain all patient/icd combinations that are discovered to be non-ruleout.         */

  data test(keep=&PATID clm_dtea icd9dx cnta ja) icds(keep=&PATID icd9dx iflag mflag)

       hold(keep=&PATID clm_dtea icd9dx cnta ja);

    set test;

    by &PATID icd9dx &FILETYPE &CLMDTE;

    retain clm_dtea clm_dtef clm_dtel cnta ja mflag iflag;

    if first.icd9dx then do;                /* initialize flags */

      mflag=0;

      iflag=0;

      clm_dtef=mdy(12,31,2100);

      clm_dtel=mdy(1,1,1900);

      end;  

    if &FILETYPE='M' then do;               /* KEEP, in medpar */

      clm_dtea=&CLMDTE;

      if &CLMDTE < clm_dtef then clm_dtef=&CLMDTE;

      if &CLMDTE > clm_dtel then clm_dtel=&CLMDTE;

      cnta=cnt;

      ja=j;

      output test;

      mflag=1;

      output icds;

      end;

    else if mflag=1 | iflag=1 then do;      /* KEEP, m=in medpar, i=outside 30 days */

      clm_dtea=&CLMDTE;

      if &CLMDTE < clm_dtef then clm_dtef=&CLMDTE;

      if &CLMDTE > clm_dtel then clm_dtel=&CLMDTE;

      cnta=cnt;

      ja=j;

      output test;

      end;

    else if first.icd9dx & last.icd9dx then delete;                          /* DROP, only appears once */



    else if first.icd9dx then do;           /* initialize retain variables */

      clm_dtea=&CLMDTE;

      if &CLMDTE < clm_dtef then clm_dtef=&CLMDTE;

      if &CLMDTE > clm_dtel then clm_dtel=&CLMDTE;

      cnta=cnt;

      ja=j;

      clm_dtef=&CLMDTE;

      end;

    else if last.icd9dx then do;

      if ((&CLMDTE-clm_dtea) > 30) | ((&CLMDTE-clm_dtef) > 30) | ((clm_dtel- &CLMDTE) > 30) then do; /* KEEP, outside 30 days */

        output test;                        /* KEEP previous information */

        clm_dtea=&CLMDTE;

        cnta=cnt;

        ja=j;

        output test;                        /* KEEP current information */

        iflag=1;

        output icds;

        end;

      /* else                                  DROP, only appears within 30 days */

      end;

    else do;

      if ((&CLMDTE-clm_dtea) > 30) | ((&CLMDTE-clm_dtef) > 30) | ((clm_dtel- &CLMDTE) > 30) then do; /* KEEP, outside 30 days */

        output test;                        /* KEEP previous information */ 

        clm_dtea=&CLMDTE;

        if &CLMDTE < clm_dtef then clm_dtef=&CLMDTE;

        if &CLMDTE > clm_dtel then clm_dtel=&CLMDTE;

        cnta=cnt;

        ja=j;

        output test;                        /* KEEP current information */ 

        iflag=1;

        output icds;

        end;

      else do;                              /* HOLD - may appear outside 30 days later */

        output hold;                        /* HOLD previous information */

        clm_dtea=&CLMDTE;                   /* upate retain variables */

        if &CLMDTE < clm_dtef then clm_dtef=&CLMDTE;

        if &CLMDTE > clm_dtel then clm_dtel=&CLMDTE;

        cnta=cnt;

        ja=j;

        end;

      end;

   

  proc sort data=icds nodups;

    by &PATID icd9dx;



  proc sort data=hold;

    by &PATID icd9dx;



  /* find all patient/icd9dx combinations that were held for recheck and were found to be valid */

  data test2(drop=iflag mflag);

    merge hold(in=h) icds(in=i);

    by &PATID icd9dx;

    if h;

    if iflag > 0 or mflag > 0 then output test2;



  data test;

    set test test2;



  proc datasets;

    delete hold icds test2;

  run;



  proc sort data=test;

    by &PATID cnta ja;



  /* reformat information from 1 icd code per record to standard format of &SETIN */

  data test(keep=&PATID cnta clm_dtea &DXVARSTR);

    set test;

    by &PATID cnta ja;

    ARRAY DXCODE (&NDXVAR) $ &DXVARSTR;

    retain &DXVARSTR '     ';

    dxcode(ja)=icd9dx;

    if last.cnta then do;

      output;

      do i=1 to &NDXVAR; 

        dxcode(i)='     ';

        end;

      end;



  proc sort data=test;

    by &PATID cnta clm_dtea;



  proc sort data=CCW_INTE.CLMRECS;

    by &PATID cnta clm_dtea;



  /* replace valid icd information into claim records.  All other information should be the same. */

  data CCW_INTE.CLMRECS(drop=cnta);

    merge test(in=t) CCW_INTE.CLMRECS(in=e);

    by &PATID cnta clm_dtea;

    if e;

    IF &START <= clm_dtea <= &FINISH; 

    rename clm_dtea=&CLMDTE;



  proc datasets;

    delete test;

  run;



  proc sort data=CCW_INTE.CLMRECS;

    by &PATID;

  run;



%MEND;



   /**********************************************************************

    Changes have been made to the remove.ruleout.dxcodes.macro.txt on 

    July 22, 2010 to remove code (below) that made a selection

    on HCPCS.  Now all the claims are looked at for conditions.

    

    if (&FILETYPE='M') or

      ('00100' <= &HCPCS <= '01999' or '10021' <= &HCPCS <= '69979' or

       '77261' <= &HCPCS <= '79999' or

       '90918' <= &HCPCS <= '91299' or '92950' <= &HCPCS <= '99199');

    

    Please make sure you use the current remove.ruleout.dxcodes.macro.txt

    before running this macro.

    

    *****************************************************************

    This SAS macro uses a dataset of claim records to calculate a 

    COMORBidity index for a patient.  This code

    reflects the Deyo adaptation of the Charlson COMORBidity index, with

    several procedure codes that reflect the Romano adaptation.

    The dataset must contain 

    lists of diagnosis and surgery codes.  There are other specific 

    variables needed to complete this task.

  

    In order to use this program:

      1. Include this file in your SAS program  

          %include '/directory path/charlson.COMORBidity.macro.sas';

      2. Create a clean file of claim records to send to the macro.

        If you wish to remove diagnoses for procedures done for 

        'rule out' purposes, you must do so externally to this macro.

    (SEE remove.ruleout.dxcodes.macro.sas from SEER-Medicare web site)

        You may include claim information from any file, including

        MEDPAR, Outpatient SAF and Physicial/Supplier (NCH).  All claim

    records of interest should be included into the same file.

        You must sort the claim records by your person identifier.

      3. After setting up your data file, call the macro COMORB:

          COMORB(ClmData, RegCase, Ind_Pri, LOS, dx01-dx10, 10, surg01-surg10, 10, HCPCS, Source)

        would send the data set 'ClmData', sorted by the person 

        identifier 'RegCase' to the macro.  The variable 'Ind_Pri'

        must be set on each record as either index (I) or Prior event (P)

        with respect to the cancer of interest.  The number of

        days for a hospital stay is found in the variable 'LOS'.

        There are 10 diagnosis codes in the array variables 'dx01-dx10'.

        Similarly, there are 10 surgery codes in the array variables 

        'surg01-surg10'.  Diagnosis and surgery codes are in ICD-9 format.

          HCPCS are the procedure codes from the SAF and NCH files. Only CPT-4

    codes are used in this program.  The file source of each claim 

    record is found in the variable 'Source' (M=Medpar, O=Outpatient,

    N=NCH).

    

    This returns the data set COMORB which contains 1 record for each person

    that had at least one claim record.  The variables included in this data set are

    the person identifier (in the example, RegCase), Charlson scores for 

    prior conditions, index conditions and prior+index conditions, and the

    condition indicator flags for prior and for index time frames. 

    

    NCI usually uses PCHRLSON calculated using claims from

      (Date of Diagnosis - 12 months) through (Date of DX - 1 month)

   **********************************************************************/

 

   /* internal macro to set indicators */

%MACRO FLAGSET(VAR,FLAG,NFLAGS,POSISHN);

   &FLAG = &POSISHN;

   &NFLAGS = &NFLAGS + 1;

   &VAR = 1;

%MEND;

 

   /* Main macro COMORB */

%MACRO COMORB(SETIN,PATID,IDXPRI,DAYS,DXVARSTR,NDXVAR,SXVARSTR,NSXVAR,HCPCS,FILETYPE);

   /**********************************************************************

    SETIN:    Dataset name: a dataset that contains the following:

    PATID:    Variable name: Unique ID for each patient.  &SETIN must be

              sorted by &PATID.  There may be more than 1 record per patient.

    IDXPRI:   Variable name: indicates for each record if the Dx and Surg 

            codes are Index 'I' or Prior 'P' to the event of interest.

            If the variable does not equal I or P, the record will not be

            used.  This variable should be set by the calling program.

    DAYS:     Variable name: contains the length of stay for hospital visits.

    DXVARSTR: Variable names: the diagnosis codes in ICD-9, ie 'DX01-DX10'

    NDXVAR:   Number: the actual number of diagnosis codes in DXVARSTR

    SXVARSTR: Variable names: the surgery codes in ICD-9, ie 'SURG01-SURG10'

    NSXVAR:   Number: the actual number of surgery codes in SXVARSTR

    HCPCS:    Variable name: the SAF and NCH file procedure codes in CPT-4.

    FILETYPE: Variable name: the source of the claim record.  Only important

            value is 'M' for MEDPAR (inpatient hospital records).  If this

            is 'M', the check for Acute MI will include &DAYS > 2.

   **********************************************************************/

 DATA CCW_INTE.COMORB;

   RETAIN CVPRIO01-CVPRIO19

          CVINDX01-CVINDX19; 

   LENGTH DEFAULT=3;

   SET &SETIN;

   BY &PATID;

    

   /* Flag arrays, diagnosis and surgery code arrays */

   ARRAY CLPRIO (19) CVPRIO01-CVPRIO19;

   ARRAY CLINDX (19) CVINDX01-CVINDX19;

   ARRAY COVAR  (19) ACUTEMI OLDMI CHF VASCUL1 VASCUL2 CVD

                     PULMON1 DEMENTIA PARALYS DIABET1 DIABET3 RENAL1

                     LIVER1 LIVER2 ULCER RHEUM AIDS cancer tumor;

   ARRAY FLAGS (*) FLAG01-FLAG19;

   ARRAY DX (&NDXVAR) $ &DXVARSTR;

   ARRAY SX (&NSXVAR) $ &SXVARSTR;

           

   /* Initialization */

   IF FIRST.&PATID THEN DO;

     DO M=1 TO 19;

       CLPRIO(M)=0;

       CLINDX(M)=0;

       END;

     END;



   DO M=1 TO 19;

     COVAR(M)=0;

     FLAGS(M)=0;

     END;

    

   NFLAGS=0;

    

   /* Diagnosis code loop */  

   DO K=1 TO &NDXVAR;

     dx_4 = substr(dx(k),1,4);

     dx_3 = substr(dx(k),1,3);



     /********** MYOCARDIAL INFARCTION WEIGHT = 1 ****************/

     IF ACUTEMI=0 THEN DO;    

       IF dx_3 = '410' then do;                     /* 410 thru 4109 */

          IF ((&FILETYPE='M') & (&DAYS > 2)) | NOT (&FILETYPE='M') THEN DO; 

            %FLAGSET(ACUTEMI,FLAGS(NFLAGS+1),NFLAGS,1);

            END;

          END;

       END;

 

     IF OLDMI=0 THEN DO;

       IF DX(K) = '412  ' then do;

          %FLAGSET(OLDMI,FLAGS(NFLAGS+1),NFLAGS,2);

          END;

       END;

 

     /********** CHF ***** WEIGHT = 1 ****************************/

     IF CHF=0 THEN DO;

       IF dx_3 = '428' | '4254' <= dx_4 <= '4259' |                      /* 428 thru 4289 */
          DX(K) in ('39891', '40201', '40211', '40291', '40401', '40403', '40411', '40413', '40491', '40493') then do;     

          %FLAGSET(CHF,FLAGS(NFLAGS+1),NFLAGS,3);

          END;

       END;

 

     /*********** PERIPHERAL VASCULAR DISEASE ******* WEIGHT = 1**/

     IF VASCUL1=0 THEN DO;                      /* 441 thru 4419 */  

       IF dx_3 in ('440', '441', '471') | dx_4 in ('0930', '4439', '4373', '5571', '5579', '7854', 'V434', 'v434') |
          '4431' <= dx_4 <= '4439' then do;

          %FLAGSET(VASCUL1,FLAGS(NFLAGS+1),NFLAGS,4);

          END;

       END;

 

     /********* CEREBROVASCULAR DISEASE ******* WEIGHT = 1 *******/

     IF CVD=0 THEN DO;            /* 430 thru 4379 */

       IF '430' <= dx_3 <= '438' | DX(K) = '36234' then do; 

          %FLAGSET(CVD,FLAGS(NFLAGS+1),NFLAGS,6);

          END;

       END;

 

     /*********** COPD *********************** WEIGHT = 1 ********/

     IF PULMON1=0 THEN DO;

       IF '490' <= dx_3 <= '505' | 

          dx_4 in ('5064', '4168', '4169', '5081', '5088') THEN DO;

          %FLAGSET(PULMON1,FLAGS(NFLAGS+1),NFLAGS,7);

          END;

       END;

  

     /********  DEMENTIA ****** WEIGHT = 1 ***********************/

     IF DEMENTIA=0 THEN DO;

       IF dx_3 = '290' | dx_4 in ('2941', '3312') then do;                     /* 290 thru 2909 */ 

          %FLAGSET(DEMENTIA,FLAGS(NFLAGS+1),NFLAGS,8);

          END;

       END;

 

     /********* Hemiplegia or paraplegia **************** WEIGHT = 2 ************/

     IF PARALYS=0 THEN DO;        

       IF dx_3 in ('342', '343') | dx_4 in ('3441', '3349') | '3340' <= dx_4 <= '3446' then do;           /* 342 thru 3429 */ 

          %FLAGSET(PARALYS,FLAGS(NFLAGS+1),NFLAGS,9);

          END;

       END;

 

     /******** DIABETES WITHOUT CHRONIC CONPLICATION ************* WEIGHT = 1 *****************/

     IF DIABET1=0 THEN DO;

       IF '2500' <= dx_4 <= '2503' | dx_4 in ('2508', '2509') then do;

          %FLAGSET(DIABET1,FLAGS(NFLAGS+1),NFLAGS,10);

          END;

       END;

 

     /********* DIABETES WITH SEQUELAE ****** WEIGHT = 2 *********/

     IF DIABET3=0 THEN DO;

       IF '2504' <= dx_4 <= '2507' THEN DO;

          %FLAGSET(DIABET3,FLAGS(NFLAGS+1),NFLAGS,11);

          END;

       END;

 

     /********* CHRONIC RENAL FAILURE (renal disease) ******* WEIGHT = 2 *********/

     IF RENAL1=0 THEN DO;      /* 582 - 5829; 583 - 5839, 588 - 5889 */

       IF dx_3 in ('582', '583', '585', '586', '588') | DX(K) in ('40301', '40311', '40391', '40402', '40403' , '40412', '40413', '40492', '40493') |
          '5830' <= dx_4 <= '5837' | dx_3 in ('585', '586', 'v56', 'V56') | dx_4 in ('5880', 'v420', 'V420', 'v451', 'V451') then do;

          %FLAGSET(RENAL1,FLAGS(NFLAGS+1),NFLAGS,12);

          END;

       END;

 
     /************** VARIOUS CIRRHODITES ******** WEIGHT = 1 *****/

     IF LIVER1=0 THEN DO;         /* includes 5714x ICD-9-CM codes */

       IF dx_4 in ('5712', '5714', '5715', '5716') then do;

          %FLAGSET(LIVER1,FLAGS(NFLAGS+1),NFLAGS,13);

          END;

       END;

 

     /************** MODERATE-SEVERE LIVER DISEASE *** WEIGHT = 3*/

     IF LIVER2=0 THEN DO;

       IF ('5722' <= dx_4 <= '5728') | ('4560' <= dx_4 <= '4562') | ('5722' <= dx_4 <= '5728') | dx_4 in ('0706', '0709', '5733', '5734', '5738', '5739', 'v427', 'V427') |

          DX(K) in ('4562 ', '45620',  '45621', '07022', '07023', '07032', '07033', '07044', '07054') THEN DO;

          %FLAGSET(LIVER2,FLAGS(NFLAGS+1),NFLAGS,14);

          END;

       END;

 

     /*************** ULCERS ********** WEIGHT = 1 ***************/

     IF ULCER=0 THEN DO;

       IF '531' <= dx_3 <= '531'  THEN DO;

          %FLAGSET(ULCER1,FLAGS(NFLAGS+1),NFLAGS,15);

          END;

       END;

     /*************** RHEUM  ********** WEIGHT = 1 ***************/

     IF RHEUM=0  THEN DO;

       IF DX(K) in ('71481', '725  ', '7100 ', '7101 ', '7104 ') |

          '7100' <= dx_4 <= '7104' | '7140' <= dx_4 <= '7142' | dx_4 in ('4465', '7148') | dx_3 = '725' THEN DO;

          %FLAGSET(RHEUM,FLAGS(NFLAGS+1),NFLAGS,16);

          END;

       END;

 

     /*************** AIDS   ********** WEIGHT = 6 ***************/

     IF AIDS=0   THEN DO;

       IF '042' <= dx_3 <= '044' then do;          /* 042 thru 0449 */

          %FLAGSET(AIDS,FLAGS(NFLAGS+1),NFLAGS,17);

          END;

       END;

    /**************** Any malignancy ********** WEIGHT = 2 ********************/

    IF cancer=0 THEN DO;
    
       IF '140' <= dx_3 <= '172' | '1740' <= dx_4 <= '1958' | '200' <= dx_3 <= '208' | dx_4 = '2386' THEN DO ;
    
          %FLAGSET(cancer,FLAGS(NFLAGS+1),NFLAGS,18);
    
       END;

    END;

        /**************** Metastic solic tumor ****** WEIGHT = 6 ************************/

    IF tumor=0 THEN DO;
    
       IF '196' <= dx_3 <= '199' THEN DO ;
    
          %FLAGSET(tumor,FLAGS(NFLAGS+1),NFLAGS,19);
    
       END;

    END;

   END; /* end of Diagnosis code loop */



   /* Surgery code loop */ 

   DO J=1 TO &NSXVAR;

     /*********** PERIPHERAL VASCULAR DISEASE ******* WEIGHT = 1**/

     IF VASCUL2=0 THEN DO;

       IF SX(J) = '3813' | SX(J) = '3814' | SX(J) = '3816' |

          SX(J) = '3818' | SX(J) = '3843' | SX(J) = '3844' |

          SX(J) = '3846' | SX(J) = '3848' | SX(J) = '3833' |

          SX(J) = '3834' | SX(J) = '3836' | SX(J) = '3838' |

          '3922' <=SX(J)<= '3929' & SX(J) ^= '3927' THEN DO;

          %FLAGSET(VASCUL2,FLAGS(NFLAGS+1),NFLAGS,5);

          END;

       END;

 

     /********* CEREBROVASCULAR DISEASE ******* WEIGHT = 1 *******/

     IF CVD=0 THEN DO;

       IF SX(J) = '3812' | SX(J) = '3842' THEN DO;

          %FLAGSET(CVD,FLAGS(NFLAGS+1),NFLAGS,6);

    END;

       END;

 

     /************** MODERATE-SEVERE LIVER DISEASE *** WEIGHT = 3*/

     IF LIVER2=0 THEN DO;

       IF SX(J) = '391 ' | SX(J) = '4291' THEN DO;

          %FLAGSET(LIVER2,FLAGS(NFLAGS+1),NFLAGS,14);

    END;

       END;

       

   END; /* end of Surgery code loop */

 

   /* HCPCS procedure code */ 

   /*********** PERIPHERAL VASCULAR DISEASE ******* WEIGHT = 1**/

   IF VASCUL2=0 THEN DO;

     IF &HCPCS IN ('35011', '35013',  '35045', '35081', '35082', 

  '35091', '35092', '35102', '35103', '35111', '35112', '35121', 

  '35122', '35131', '35132', '35141', '35142', '35151', '35152', 

  '35153', '35311', '35321', '35331', '35341', '35351', '35506', 

  '35507', '35511', '35516', '35518', '35521', '35526', '35531', 

  '35533', '35536', '35541', '35546', '35548', '35549', '35551',

  '35556', '35558', '35560', '35563', '35565', '35566', '35571',

  '35582', '35583', '35585', '35587', '35601', '35606', '35612',

  '35616', '35621', '35623', '35626', '35631', '35636', '35641',

  '35646', '35650', '35651', '35654', '35656', '35661', '35663',

  '35665', '35666', '35671', '35694', '35695') OR

        '35355' <= &HCPCS <= '35381' 

        THEN DO;

        %FLAGSET(VASCUL2,FLAGS(NFLAGS+1),NFLAGS,5);

        END;

     END;



   /********* CEREBROVASCULAR DISEASE ******* WEIGHT = 1 *******/

   IF CVD=0 THEN DO;

     IF &HCPCS IN ('35301', '35001', '35002', '35005', '35501', '35508',

  '35509', '35515', '35642', '35645', '35691', '35693') THEN DO;

        %FLAGSET(CVD,FLAGS(NFLAGS+1),NFLAGS,6);

        END;

     END;



   /************** MODERATE-SEVERE LIVER DISEASE *** WEIGHT = 3*/

   IF LIVER2=0 THEN DO;

     IF &HCPCS IN ('37140', '37145', '37160', '37180', '37181', '75885', 

        '75887', '43204', '43205') THEN DO;

        %FLAGSET(LIVER2,FLAGS(NFLAGS+1),NFLAGS,14);

        END;

     END;



   /* end HCPCS procedure code */ 

   /* Use general indicators to turn on Prior and Index indicators */

   IF NFLAGS > 0 THEN DO;

     DO M=1 TO NFLAGS;

       I=FLAGS(M);

       IF COVAR(I) THEN DO;

         IF &IDXPRI = 'P'   THEN  CLPRIO(I)=1;

         ELSE IF &IDXPRI = 'I'   THEN  CLINDX(I)=1;

         END;

       END;

     END;



   IF LAST.&PATID THEN DO;

     /* CALCULATE THE COEFFICIENT FOR PRIOR CONDITIONS ONLY */

     PCHRLSON = (CVPRIO01 | CVPRIO02) +

                (CVPRIO03) +

                (CVPRIO04 | CVPRIO05) +

                (CVPRIO06) +

                (CVPRIO07) +

                (CVPRIO08) +

                ((CVPRIO10) & ^(CVPRIO11)) +

                ((CVPRIO13) & ^(CVPRIO14)) +

                (CVPRIO15) +

                (CVPRIO16) +

                ((CVPRIO09) * 2) +

                ((CVPRIO12) * 2) +

                ((CVPRIO11) * 2) +

                ((CVPRIO14) * 3) +

                ((CVPRIO17) * 6) + 

                ((CVPRIO18) * 2) + 

                ((CVPRIO19) * 6) ;

 

     /* CALCULATE THE COEFFICIENT FOR PRIOR AND INDEX COND */

     CHRLSON = (CVPRIO01 | CVPRIO02 | CVINDX02) +

               (CVPRIO03) +

               (CVPRIO04 | CVINDX04 | CVPRIO05 | CVINDX05) +

               (CVPRIO06) +

               (CVPRIO07 | CVINDX07) +

               (CVPRIO08 | CVINDX08) +

               ((CVPRIO10 | CVINDX10) & ^(CVPRIO11 | CVINDX11)) +

               ((CVPRIO13 | CVINDX13) & ^(CVPRIO14 | CVINDX14)) +

               (CVPRIO15) +

               ((CVPRIO09) * 2) +

               ((CVPRIO12 | CVINDX12) * 2) +

               ((CVPRIO11 | CVINDX11) * 2) +

               ((CVPRIO14 | CVINDX14) * 3); 

 

     /* CALCULATE THE COEFFICIENT FOR INDEX CONDITIONS ONLY */

     XCHRLSON = (CVINDX02) +

                (CVINDX04 | CVINDX05) +

                (CVINDX07) +

                (CVINDX08) +

                ((CVINDX10) &^ (CVINDX11)) +

                ((CVINDX13) &^ (CVINDX14)) +

                ((CVINDX12) * 2) +

                ((CVINDX11) * 2) +

                ((CVINDX14) * 3); 



     OUTPUT;

     END;

   

   KEEP &PATID PCHRLSON CHRLSON XCHRLSON CVPRIO01-CVPRIO19 CVINDX01-CVINDX19;

   Label PCHRLSON = 'Prior Charlson COMORBidity score'

         CHRLSON  = 'Prior+Index Charlson COMORBidity score'

         XCHRLSON = 'Index Charlson COMORBidity score'

         

         CVPRIO01 = 'Prior: MYOCARDIAL INFARCTION (1)'            

         CVPRIO02 = 'Prior: OLD MYOCARDIAL INFARCTION (1)'        

         CVPRIO03 = 'Prior: CHF (1)'                              

         CVPRIO04 = 'Prior: PERIPHERAL VASCULAR DISEASE (DX, 1)'  

         CVPRIO05 = 'Prior: PERIPHERAL VASCULAR DISEASE (SURG, 1)'

         CVPRIO06 = 'Prior: CEREBROVASCULAR DISEASE (1)'          

         CVPRIO07 = 'Prior: COPD (1)'                             

         CVPRIO08 = 'Prior: DEMENTIA (1)'                         

         CVPRIO09 = 'Prior: Hemiplegia or paraplegia (2)'                        

         CVPRIO10 = 'Prior: DIABETES (1)'                         

         CVPRIO11 = 'Prior: DIABETES WITH SEQUELAE (2)'           

         CVPRIO12 = 'Prior: CHRONIC RENAL FAILURE (2)'            

         CVPRIO13 = 'Prior: VARIOUS CIRRHODITES (1)'              

         CVPRIO14 = 'Prior: MODERATE-SEVERE LIVER DISEASE (3)'    

         CVPRIO15 = 'Prior: ULCERS (1)'                                                 

         CVPRIO16 = 'Prior: RHEUM (1)'                            

         CVPRIO17 = 'Prior: AIDS (6)'   

         CVPRIO18 = 'Prior: Any malignancy (2)'   
         
         CVPRIO19 = 'Prior: Metastatic solid tumor (6)'   


         

         CVINDX01 = 'Index: MYOCARDIAL INFARCTION (1)'            

         CVINDX02 = 'Index: OLD MYOCARDIAL INFARCTION (1)'        

         CVINDX03 = 'Index: CHF (1)'                              

         CVINDX04 = 'Index: PERIPHERAL VASCULAR DISEASE (DX, 1)'  

         CVINDX05 = 'Index: PERIPHERAL VASCULAR DISEASE (SURG, 1)'

         CVINDX06 = 'Index: CEREBROVASCULAR DISEASE (1)'          

         CVINDX07 = 'Index: COPD (1)'                             

         CVINDX08 = 'Index: DEMENTIA (1)'                         

         CVINDX09 = 'Index: PARALYSIS (2)'                                 

         CVINDX10 = 'Index: DIABETES (1)'                         

         CVINDX11 = 'Index: DIABETES WITH SEQUELAE (2)'           

         CVINDX12 = 'Index: CHRONIC RENAL FAILURE (2)'            

         CVINDX13 = 'Index: VARIOUS CIRRHODITES (1)'              

         CVINDX14 = 'Index: MODERATE-SEVERE LIVER DISEASE (3)'    

         CVINDX15 = 'Index: ULCERS (1)'                                                 

         CVINDX16 = 'Index: RHEUM (1)'                            

         CVINDX17 = 'Index: AIDS (6)'     

         CVINDX18 = 'Prior: Any malignancy (2)'   
         
         CVINDX19 = 'Prior: Metastatic solid tumor (6)'                          

         ;



run; 

%MEND;